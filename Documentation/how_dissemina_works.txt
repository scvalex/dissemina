How Dissemina Works
===================

1. Abstract
-----------

This document describes the general principles on which dissemina works. It
gives a brief overview of the call graph and explains what the data structures
represent and how they are used.

This document deals with v0.0.1. It may become slightly outdated as new
versions come out.

2. Design Principles
--------------------

The goal was for the code to be human readable in every point. Thus function
names tend to be long and expressive, variable names might not mean anything
by them selves, but work better when used in phrases and the code, in general,
if spoken sounds a lot like English.

Functions are also quite short (fitting in one editor screen). Even so,
functions were not split by number of lines, but by logic. i.e. If it didn't
make sense to have two things in the same place, they would have been split.

Another idea was to keep blocks of code as short as possible. Ifs, whiles,
fors and other control structures are generally short. This was sometimes
achived by moving functionality to procedures, but more often by rewriting the
offending block.

3. Main() and the Grand Design
------------------------------

For ease of reading, main() is reproduced here

source--------------------------------------------
int main(int argc, char *argv[]) {
	setup_listener();

	int i;
	for (i = 0; i < NUM_FDS; ++i)
		fds[i].fd = -1;	/* fds that are -1 are ignored by poll() */

	fds[0].fd = listener;
	fds[0].events = POLLRDNORM;
	int timeout;
	for (;;) {
		timeout = -1; /* a negative timeout means poll forever */
		if (requests.next)
			timeout = 0; /* if there's a reqeust ready, timeout immediately */
		if (poll(fds, NUM_FDS, timeout) == -1)
			quit_err("poll");
		
		get_new_connections();
		check_connections_for_data();
		process_requests();
	}

	close(listener);
	return 0;
}
source--------------------------------------------

First setup_listener() is called. This function sets up a socket for listening
and saves the file descriptor in listener. The actual initialisation is a
standard create socket with socket(), set a few annoying options, bind() it to
a local address (just the port in our case), and, finally, marks it for
listening with listen().

Next, the fds array is initialised. This is an array of pollfd.

-----------------------------------------
struct pollfd {
	int   fd;         /* file descriptor */
	short events;     /* requested events */
	short revents;    /* returned events */
};
-----------------------------------------

The full explanation for this struct is in poll(2). It's used for the poll()
function. poll() watches the file descriptors named in the array for the
events specified. When something happens, the event detected is marked in
revents and poll() returns.

The important thing here is that poll() ignores elements with file descriptors
of -1. Thus, the for actually says ``ignore all elements in the array until
further notice''.

But we don't want to ignore _all_ the elements. To be precise, we want to
watch listener for read events (POLLRDNORM events). So, the next couple of
lines fill in the details of listener into fds[0]. Note the 0. All fors and
the like in the programme that deal with fds start from 1. This is deliberate
as reads from listener are, at a logical level, different from normal reads
(i.e. reads from incoming sockets).

Next comes an infinite loop. For starters, it's not processor inefficient as
poll() blocks. This means that the programme doesn't use 100% CPU doing
nothing.

The first significant instruction here is poll(). As mentioned before, it goes
through the NUM_FDS elements of the fds array, checking each for the events
specified. At the begining, it just checks listener for normal read events.

The last argument to poll() is a timeout. Generally, if a change to any of the
descriptors doesn't hapen withing timeout milliseconds, poll() simply returns.
A negative timeout is equivalent to infinity.

Here the timeout is set on the three lines above poll(). The first one sets
the timeout to -1, meaning ``poll until listener has data to read''. Sometimes
there might be requests that need to processed; in this case, timeout is set
to 0, meaning ``timeout immediately and continue processing requests''.

The next three functions are quite complex and each has it's own section, but
a short overview follows.

Get_new_connections() checks listener for data to read. New connections are
first marked in fds and then a Request object is created for the data to be
read into.

Check_connections_for_data() checks the other fds for data to read. If this is
the case, the data is read into the corresponding Request object. The request
may not be read in a single go, so this function may write to a Request
several times. If the request is completed (i.e. it ends with CR LF CR LF),
the descriptor in fds is set to -1 so that further reads will not be possible,
several fields in Request are filled in and it is marked as ready for
processing (i.e. the next function will work on it).

The final function in main() is process_requests(). This is where the data is
actually sent. It goes through the list of Requests and works only on the ones
marked as ready for processing. It decides on what to send back (the file or
an error page) and sends it in chunks of SENDBUFSIZE (default is 1K).

That's it for main(). The next sections deal with the three functions
previously mentioned.

